# Quick Start
# $ docker compose -f compose.rosbot.yaml up

# x-net-config:
#   - &dds-config-file "./dds-config.xml:/dds-config.xml" 
#   - &dds-config-env "FASTRTPS_DEFAULT_PROFILES_FILE=/dds-config.xml"

x-net-config:
  - &dds-config-file "" 
  - &dds-config-env ""

services:

  dds-router:
    image: husarnet/dds-router:v0.4.0
    restart: unless-stopped
    network_mode: host
    ipc: host
    volumes:
      - ./router-config.server.yaml:/config.yaml
    command: >
      ddsrouter 
      --config-path /config.yaml 
      --debug

  # navigation:
  #   image: husarion/navigation2:galactic
  #   restart: unless-stopped
  #   network_mode: host
  #   ipc: host
  #   volumes:
  #     - ./config/nav2_params.yaml:/nav2_params.yaml
  #     # - *dds-config-file
  #   environment:
  #     # - *dds-config-env
  #     - ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}
  #     - RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION:-rmw_fastrtps_cpp}
  #   command: >
  #     ros2 launch nav2_bringup navigation_launch.py    
  #       params_file:=/nav2_params.yaml
  #       use_sim_time:=${USE_SIM_TIME:-False}

  # localization-mapping:
  #   image: husarion/slam-toolbox:galactic
  #   restart: unless-stopped
  #   network_mode: host
  #   ipc: host
  #   container_name: slam-toolbox
  #   volumes:
  #     - ./config/slam_params.yaml:/slam_params.yaml
  #     - ./maps:/maps
  #     # - *dds-config-file
  #   environment:
  #     # - *dds-config-env
  #     - ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}
  #     - RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION:-rmw_fastrtps_cpp}
  #   command: >
  #     ros2 launch slam_toolbox online_sync_launch.py
  #       slam_params_file:=/slam_params.yaml
  #       use_sim_time:=${USE_SIM_TIME:-False}

  rplidar:
    image: husarion/rplidar:galactic
    restart: unless-stopped
    network_mode: host
    ipc: host
    devices:
      - /dev/ttyUSB0
    # volumes:
    #   - *dds-config-file
    environment:
      # - *dds-config-env
      - ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}
      - RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION:-rmw_fastrtps_cpp}
    command: >
      ros2 launch sllidar_ros2 sllidar_launch.py 
        serial_baudrate:=${RPLIDAR_BAUDRATE:-115200}

  bridge:
    image: husarion/ros:galactic-ros1-bridge
    restart: unless-stopped
    network_mode: host
    ipc: host
    # volumes:
    #   - *dds-config-file
    environment: 
      - ROS_IP=127.0.0.1
      - ROS_MASTER_URI=http://127.0.0.1:11311
      - ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}
      - RMW_IMPLEMENTATION=${RMW_IMPLEMENTATION:-rmw_fastrtps_cpp}
      # - *dds-config-env
    command: >
      ros2 run ros1_bridge dynamic_bridge

  ros-master:
    image: ros:noetic-ros-core
    restart: unless-stopped
    network_mode: host
    ipc: host
    environment: 
      - ROS_IP=127.0.0.1
    command: stdbuf -o L roscore

  rosbot:
    image: husarion/rosbot:noetic
    restart: unless-stopped
    network_mode: host
    ipc: host
    devices:
      - ${SERIAL_PORT}
    environment:
      - ROS_IP=127.0.0.1
      - ROS_MASTER_URI=http://127.0.0.1:11311
      - SERIAL_PORT=${SERIAL_PORT:?err}
    command: >
      roslaunch --wait rosbot_bringup rosbot_docker.launch
